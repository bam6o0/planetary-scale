<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clouds Above the Hill</title><link>https://bam6o0.github.io/planetary-scale/</link><description>Recent content on Clouds Above the Hill</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>Copyright (C) 2020- bam6o0 All Right Reserved.</copyright><atom:link href="https://bam6o0.github.io/planetary-scale/index.xml" rel="self" type="application/rss+xml"/><item><title>開発環境の構築につかれた。</title><link>https://bam6o0.github.io/planetary-scale/what-is-devenv/</link><pubDate>Wed, 23 Sep 2020 08:29:32 +0000</pubDate><guid>https://bam6o0.github.io/planetary-scale/what-is-devenv/</guid><description>ソフトウェアエンジニアと開発環境構築は切っても切れない関係だといえる。せめて環境構築といい関係を構築したい。
なぜ疲れたのか Mac: 学生時代 学生時代はMacをメイン機で開発していた。何か必要なたびにbrewコマンドを使ってパッケージをインストールしてを繰り返してるうちに、パッケージが増えすぎて容量をかなり食っていた。 Macの中は全く整理されていないカオスな状況で、２度と使わないパッケージや何のパッケージかわからないものが多かった。brew以外でいれたパッケージによるバージョンの不一致にや、二重インストールなど諸所の問題がよく起きていた。
またサーバーにデプロイするタイミングで、本番環境（Linux）構築が一番自信のない感じになるといった状況だった。apt? apt-get??
Ubuntu: 研究室時代 研究室ではGANを使ったレコメンデーションについて研究していて、深層学習のためにGPUを多用していた。この時Windowsにする理由がなかったので、 研究室に転がっていたUbuntuを入れていた。この時Nvidia-dockerでGPU計算をしたり、直接インストールしたりと、ごちゃごちゃしていたのを覚えている。
Windows: プロダクト開発時代 就職してからはJavaとAngularを使ったプロダクト開発を始めた。高校生ぶりのWindowsに戸惑いながらも、Java開発をする分にはWindowsでも特に問題ないなといった感じで仕事をしていた。 この時は誰がメンテしているのかも知らない環境設定スクリプト(batファイル)を叩いて、数時間後に環境が出来上がってるという脳死状態で、自分でメンテナンスする気は全く起きない状況だった。ただ配属当初は環境が悪いのか、コードが悪いのかの切り分けができずよく頭を抱えた。
WSL+ローカルサーバー+AWS: SRE時代 その後SREへ異動してきて状況は一変した。オペレーションやオンコールでAWS上のインスタンスへSSH、ネットワーク系のコマンド、MySQLクライアント・PostgreSQLクライアントを多用するようになった。 この時からLinux系ターミナルが必要となり、とりあえずでWSLをよく使うようになった。WSLは悪くはないが、ファイルシステムが遅かったり、systemdがプロセス1で動いてなかったりと、微妙なLinuxとの違いが逆に気になる感じだった。
またAWS-CLIを使うためのMFA認証やVagrant・Ansibleを使った検証、DockerやDocker-composeを使ったオペレーションツールなど、即席でインストールしたり設定したりして対応していた。WSLでは限界を感じて、別のデスクトップPCをUbuntuサーバーにして、そこへSSHして検証環境としていた。 いつ書いたかかよくわからにコンフィグが大量に残ってくると、ミドルウェアをローカルで検証するのも一苦労である。
異動や在宅勤務 また異動に伴いPCのリプレイス、リモートワークに伴うPCの配布、自宅PC買い替えなど、環境構築する機会自体も増えてきた。 ソフトウェアエンジニアをやり続ける上で今後もかならず発生するイベントであることは間違いない。 疲れたし、非常にめんどくさい。
ここ数年でメジャーなOSで開発環境構築をしてきたが、どれも環境の再現性があるかといわれるとないとしか言いようがない。 また毎回その場で調べて色々インストール・設定していた（毎回Dockerをsudoなしで実行する方法を調べている。）が、SREとして自分の開発環境構築をコード化しないのは職務怠慢ではないかと思い、考えてみることにした。
最低限必要だった要件 Windows, macOS, Linuxで流用可能でLinuxベースの開発ができる。 いつでも環境をリセットして再構築できる。 AWS-CLI, AWS-CDK, Terraformを使ってすぐにクラウド開発ができる。 Docker, Docker-composeでコンテナ開発ができる。 どんなOSでも、クリーンな状態を常に保てて、環境自体を使い捨てができることを意識している。 また現職的な理由でクラウドネイティブ開発な環境に寄っている。
作ったもの 開発環境のためのVMを作ることにした。
bam6o0/devenv
これの最大のメリットはvagrant upですべてのインストールと設定が終わることである。
VagrantとVirtusBoxを利用して完全VM上での環境に移行することにより、ホストのOS依存や環境汚染を最小限にした。 各種必要なソフトウェアのインストールや設定などはprovisionにスクリプトとして書き、構築時点ですべてが揃っている状態にした。 各種パラメータやトークン情報などはvagrant-envを使い、.envで外だしできるようにした。
特にaws-mfaが即実行できるのは魅力的だ。
VMの設定でホストのPCとフォルダを共有する設定がよくあるが、devevnは完全に独立している。共有はホスト環境とのファイルシステムの違いや権限など様々な問題の原因になるため個人的には非推奨である。 コードやコンテナイメージのホスティングサービス、クラウドサービスを積極的に活用することが現代らしい開発環境ではないかと思う。 ポートは80と8080をポートフォワーディングしている。ポートはこの二つだけでほぼ十分だと思う。
まとめ 現状はVagrantfileに各種セットアップのためのコマンドを書きなぐった程度のものだが、今後の環境構築コストは大幅に短縮できるようになった。 また環境構築の知識と経験を資産にでき、改善のためのPDCAを回せるようになった点も大きい。
なにより、常に真っ新な環境で新規開発を始めれる喜び、これに勝るものはなし。</description></item></channel></rss>